# This is a basic workflow to help you get started with Actions

name: Lint and Test

run-name: Lint and Test - ${{ github.event.pull_request.head.ref }}

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the release branch
  pull_request:
    branches: [main]


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-and-lint:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    name: Build and Lint
    timeout-minutes: 5
  
    services:
      redis:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Setup Linux Dependencies
        shell: bash
        run: |
          sudo apt-get update \
            && sudo apt-get install -y libpoppler-cpp-dev pkg-config procps \
            && sudo apt-get install -y --no-install-recommends g++ libgeos-dev

      - name: Install latest version of Poetry
        shell: bash
        if: steps.cache-poetry.outputs.cache-hit != 'true'
        run: |
          curl -sSL https://install.python-poetry.org | python -
          echo "$HOME/.poetry/bin" >> $GITHUB_PATH

      - name: Checkout branch and submodules
        uses: actions/checkout@v3

      - name: Install dependencies
        shell: bash
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
          poetry install --no-interaction

      - name: Lint and Test
        shell: bash
        run: |
          . .venv/bin/activate
          sh ./scripts/lint.sh
          pytest -sv --cov-report=xml tests          

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

